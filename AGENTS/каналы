= Каналы

Каналом будем называть функцию или метод, который в зависимости от количества аргументов работает как геттер или геттер-сеттер.

Вспомните jQuery, когда мы вызываем метод без аргументов - он возвращает значение, при вызове его с параметром, этот параметр устанавливается в качестве значения. 

```typescript
$('body > input').val('Hello')
$('body > input').val() // Возвращает экземпляр jQuery
```

Только канал при установке значения, возвращает то что вернула его функция. Рассматривать канал нужно как самостоятельную единицу, которая хранит свое состояние. Простейший канал можно реализовать так:

```typescript
let _name = ''
function name(next = _name) {
	return _name = next
}

name() // ''
name('Guest') // 'Guest'
name() // 'Guest'
```

Так же канал может быть "только для чтения", т.е. он может игнорировать запись значения, а в самом методе может быть произвольная логика.

```typescript
let _nameLength?: number
function nameLength(next?: string) {
	if (next !== undefined) {
		_nameLength = next.length
	}

	return _nameLength
}
```

= Реактивные декораторы

Есть два декоратора $mol_mem, $mol_mem_key. Они берут на себя кеширование значения возвращаемого из метода и инвалидацию кеша, когда оно становится неактуальным. Метод с одним из этих декораторов, должен реализовывать контракт канала.

$mol_mem - используется для хранения и работы с единичным состоянием. 

```typescript
@ $mol_mem
name(next?: string) {
	 return next ?? 'default'
}

this.name() // 'default'
this.name('Guest') // 'Guest'
this.name() // 'Guest'
```
листинг 7 - пример $mol_mem

Часть `?? 'default'` устанавливает значение по умолчанию, она не обязательна. После первого вызова, декоратор закеширует то что вернул метод и при последующих вызовах будет возвращать значение из кэша, без запуска метода. Снова код метода запуститься только если передать в него параметр или изменятся значения других методов от которых он зависит. 

$mol_mem_key нужен для хранения и работы с коллекцией состояний. У него первым аргументов добавляется идентификатор, который может быть любого типа.

```typescript
@ $mol_mem_key
name(id: number, next?: string) {
	return next ?? 'default'
}

this.name(0) // 'default'
this.name(0, 'Guest') // 'Guest'
this.name(0) // 'Guest'

this.name(1) // 'default'
```
листинг 8 - `$mol_mem_key` хранит сразу коллекцию значений, в остальном он работает как `$mol_mem`.

Обратите внимание, что оба декоратора ленивы, т.е. пока метод не вызовут, ничего не создается. В примере выше, было обращение к двум идентификаторам `0` и `1`  - создано только два состояния.
--

\\Current Original on $hyoo_page.\https://page.hyoo.ru/#!=qxmh6t_sinbmb\\
